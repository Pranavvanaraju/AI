def alphabeta(depth, node, maximizing, values, alpha, beta):
    if depth == 2:  # Leaf node depth
        return values[node]
    if maximizing:
        best = float('-inf')
        for i in range(2):
            val = alphabeta(depth + 1, node * 2 + i, False, values, alpha, beta)
            best = max(best, val)
            alpha = max(alpha, best)
            if beta <= alpha:
                break  # Beta cut-off
        return best
    else:
        best = float('inf')
        for i in range(2):
            val = alphabeta(depth + 1, node * 2 + i, True, values, alpha, beta)
            best = min(best, val)
            beta = min(beta, best)
            if beta <= alpha:
                break  # Alpha cut-off
        return best

def main():
    values = [3, 5, 6, 9]  # Leaf node values
    result = alphabeta(0, 0, True, values, float('-inf'), float('inf'))
    print("Best value (with alpha-beta):", result)

main()
